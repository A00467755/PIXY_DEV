using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using PIXY.Data;
using PIXY.Models;

namespace PIXY.Controllers
{
    public class ImagesController : Controller
    {
        private readonly PIXYContext _context;

        public ImagesController(PIXYContext context)
        {
            _context = context;
        }


        // GET: Images
        public async Task<IActionResult> Index(string ImageCategory, string SearchString)
        {
            IQueryable<string> CategoryQuery = from m in _context.Images
                                            orderby m.CategoryDesc
                                            select m.CategoryDesc;
            
            var FilteredImages = from i in _context.Images
                                 select i;

            if (!string.IsNullOrEmpty(ImageCategory))
            {
                FilteredImages = FilteredImages.Where(s => s.CategoryDesc == ImageCategory);
            }

            if (!String.IsNullOrEmpty(SearchString))
            {
                FilteredImages = FilteredImages.Where(s => s.ImageTags!.Contains(SearchString));
            }

            var imageCategoryVM = new ImagesCategoryView
            {
                Categories = new SelectList(await CategoryQuery.Distinct().ToListAsync()),
                Images = await FilteredImages.ToListAsync()
            };
            return View(imageCategoryVM);
        }

        // GET: Images/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Images == null)
            {
                return NotFound();
            }

            var image = await _context.Images
                .FirstOrDefaultAsync(m => m.ID == id);
            if (image == null)
            {
                return NotFound();
            }

            return View(image);
        }



        private bool ImageExists(int id)
        {
          return _context.Images.Any(e => e.ID == id);
        }
    }
}
